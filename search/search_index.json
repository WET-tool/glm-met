{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GLM-met","text":"<p>A Python package for downloading meteorological data and processing it to formats required for running the GLM model and other water balance models.</p>"},{"location":"#glm","title":"GLM","text":"<p>GLM is a 1-dimensional lake water balance and stratification model. It is coupled with a powerful ecological modelling library to also support simulations of lake water quality and ecosystems processes.</p> <p>GLM is suitable for a wide range of natural and engineered lakes, including shallow (well-mixed) and deep (stratified) systems. The model has been successfully applied to systems from the scale of individual ponds and wetlands to the scale of Great Lakes.</p> <p>For more information about running GLM please see the model website's scientific basis description and the GLM workbook. </p> <p>The GLM model is available as an executable for Linux (Ubuntu), MacOS, and Windows. It is actively developed by the  Aquatic EcoDynamics research group at The University of Western Australia.</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install glm-met\n</code></pre>"},{"location":"#use","title":"Use","text":"<p>Import the glm-met package into a Python program and use to download meteorological data from a supported data provider.</p> <p>The following Jupyter notebook can be opened on Google Colab to demonstrate how glm-met can be used to download meteorological data from NASA POWER's API:</p> <p> </p> <pre><code>import os\nimport glm_met.nasa_power.nasa_power as nasa_power\n\n# initialise a Power object\n# the object attributes are set to:\n# - query the NASA POWER API \n# - query for hourly met data from 2020 to 2022\n# - query a location in Western Australia\n\npower = nasa_power.Power(\n    location=(116.6, -32.17), \n    date_range=(\"20200101\", \"20221231\"), \n    met_data=None,\n    glm_met_data=None,\n    parameters=None,\n)\n\n# make a call to the NASA POWER API\n# download requested data and store as DataFrame\n# in the `power.met_data.data` attribute\npower.get_variables(request_settings=None)\n\n# convert downloaded data to GLM format\npower.convert_to_glm()\n\n# write downloaded data to disk\npower.write_glm_met(path=os.getcwd(), zip_f=False, fname=\"met.csv\")\n</code></pre>"},{"location":"#data-providers","title":"Data Providers","text":"<p>glm-met provides a base class that can be extended to support a range of meteorological data providers. </p>"},{"location":"#silo","title":"SILO","text":"<p>SILO is a database of daily, pre-processed Australian climate data from 1889 to the present day. The product is hosted by the Queensland Department of Environment and Science (DES) and is based on observational data from the Bureau of Meteorology and other providers. It is made available under the Creative Commons Attribution 4.0 International (CC BY 4.0) licence. </p> <p>glm-met retrieves SILO data from the patched point dataset (weather station data) and the drill down (point-like data extracted from a gridded product). </p>"},{"location":"#nasa-power","title":"NASA POWER","text":"<p>NASA Prediction of Worldwide Energy Resources (POWER) provides solar and meteorological data available at monthly, daily, and hourly time steps via the NASA POWER Data Services API. The NASA POWER project is funded by NASA's Applied Science Program and the data is available from the 1980s until near real time. The solar radiation data is derived from several remote sensing-based products at a 1.0\u00b0 grid cell spatial resolution. The meteoroloical data is based on GMAO MERRA-2 reanalysis and assimilation of observations data at a 0.5\u00b0 grid cell spatial resolution. </p> <p>The hourly data from NASA POWER is available from 2001. Currently, glm-met provides tools to retrieve hourly data from the NASA POWER API. </p>"},{"location":"contributing/","title":"GLM-met","text":""},{"location":"contributing/#developing","title":"Developing","text":""},{"location":"contributing/#environment","title":"Environment","text":"<p>A Docker container can be used to create a development environment. You can either build the Docker image:</p> <pre><code>docker build -t glm-met-dev .devcontainer\n</code></pre> <p>Or, you can develop glm-met using a dev container. </p>"},{"location":"contributing/#code-style","title":"Code style","text":"<p>Code linting and formatting uses ruff and black. A script to format the glm-met repository can be run: <code>./scripts/format.sh</code>. </p> <p>pre-commit is used to run ruff and black. </p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>pytest is used for testing glm-met. </p> <p>If testing, please add tests under the <code>tests</code> directory. If you need test data for running tests, add them as <code>pytest.fixtures</code> in <code>conftest.py</code>. </p>"},{"location":"contributing/#extending","title":"Extending","text":"<p>The glm-met package can be extended to support downloading data from a range of meteorological data providers. </p> <p>There are two base classes that can be extended to provide with functionality for a new meteorological data provider. Theses base classes can be found in <code>glm_met/glm_met.py</code>.</p> <p>Specifically, there is a base class <code>GlmMet</code> that should be extended to define a class that comprises attributes and methods necessary to retrieve meteorological data from a specific data provider. This base class has four abstract methods that any class inheriting <code>GlmMet</code> must override and provide an implementation for:</p> <ul> <li><code>get_variables()</code> - a method to download requested weather variables from a data provider.</li> <li><code>write_met()</code> - a method to write data downloaded from a data provider to disk.</li> <li><code>convert_to_glm()</code> - a method to convert data downloaded from a data provider to GLM format.</li> <li><code>write_glm_met()</code> - a method to write meteorological data in GLM format to disk. </li> </ul> <p>Overriding, and providing an implementation for these methods, these methods ensures that the class for a new meteorological data provider offers functionality to retrieve user / client requested data and format this data ready for GLM. </p> <p>The typical development pattern for a new meteorological data provider (e.g. open-meteo's Climate API) is:</p> <p>Create a new directory and package for the new data provider inside the <code>glm_met</code> directory:</p> <pre><code>glm_met/\n    openmeteo/\n        __init__.py\n    __init__.py\n    glm_met.py\n</code></pre> <p>Create a new module within the <code>openmeteo</code> directory (e.g. named <code>climate.py</code>):</p> <pre><code>glm_met/\n    openmeteo/\n        __init__.py\n        climate.py\n    __init__.py\n    glm_met.py\n</code></pre> <p>In <code>climate.py</code> create a new class that extends the <code>GlmMet</code> base class (which is defined in <code>glm_met.py</code>):</p> <pre><code># add to climate.py\nfrom glm_met import glm_met\n\nclass MetData(glm_met.MetData):\n    def __init__(self, metadata: dict, data: pd.DataFrame):\n        \"\"\"\n        Class for meteorological data and its associated metadata.\n\n        Used within instances of `ClimateChange` class to store\n        meteoroligcal data downloaded from the open-meteo\n        climate API.\n        \"\"\"\n        self.metadata = metadata\n        self.data = data\n\n\nclass ClimateChange(glm_met.GlmMet):\n    \"\"\"\n    Class for retrieving and processing daily climate change data from\n    open-meteo's Climate API.\n    \"\"\"\n\n\n    def __init__(\n        self,\n    ):\n        \"\"\"\n        Initialize the `ClimateChange` object for retrieving and storing\n        meteorological data from open-meteo's Climate API.\n        \"\"\"\n\n        def get_variables(self) -&gt; None:\n            \"\"\"Override GlmMet.get_variables() with implementation to \n            get variables from weather data provider.\"\"\"\n            # implementation here\n\n        def write_met(self) -&gt; None:\n            \"\"\"Override GlmMet.write_met() with implementation to\n            save weather data from data provider.\"\"\"\n            # implementation here\n\n        def convert_to_glm(self) -&gt; None:\n            \"\"\"Override GlmMet.convert_to_glm() with implementation to\n            convert weather data to GLM format.\"\"\"\n            # implementation here\n\n        def write_glm_met(self) -&gt; None:\n            \"\"\"Override GlmMet.write_glm_met() with implementation to\n            save weather data in GLM format.\"\"\"\n            # implementation here\n\n</code></pre>"},{"location":"nasa_power/","title":"NASA POWER","text":""},{"location":"nasa_power/#metdata","title":"MetData","text":"<p>             Bases: <code>glm_met.MetData</code></p> <p>Class for meteorological data and its associated metadata.</p> <p>Used  to store meteoroligcal data downloaded from the NASA POWER API.</p> <p>Attributes:</p> <ul> <li> metadata             (<code>dict</code>)         \u2013          <p>Metadata associated with the meteorological data.</p> </li> <li> data             (<code>pd.DataFrame</code>)         \u2013          <p>Meteorological data in a Pandas DataFrame.</p> </li> </ul>"},{"location":"nasa_power/#nasa-power","title":"NASA POWER","text":"<p>             Bases: <code>glm_met.GlmMet</code></p> <p>Class for retrieving and processing meteorological data from the NASA POWER API.</p> <p>Initialises a <code>Power</code> object retrieving and storing meteorological data from NASA POWER's API.</p> <p>Parameters:</p> <ul> <li> location             (<code>tuple[float, float]</code>)         \u2013          <p>Latitude and longitude of the location for the data retrieval.</p> </li> <li> date_range             (<code>tuple[str, str]</code>)         \u2013          <p>Start and end dates for the data retrieval (in ISO 8601 format, e.g., \"YYYY-MM-DD\").</p> </li> <li> met_data             (<code>Union[None, MetData]</code>)         \u2013          <p>Attribute to store meteorological data downloaded from open-meteo.</p> </li> <li> glm_met_data             (<code>Union[None, pd.DataFrame]</code>)         \u2013          <p>Attribute to store meteorological data downloaded from open-meteo in GLM format.</p> </li> <li> parameters             (<code>Union[None, list[str]]</code>)         \u2013          <p>List of meteorological variables to retrieve. The default is to use the list specified in <code>settings.hourly_glm_default</code>.</p> </li> <li> timezone             (<code>str</code>)         \u2013          <p>LST - local solar time or UTC.</p> </li> <li> community             (<code>str</code>)         \u2013          <p><code>SB</code> for sustainable buildings and <code>AG</code> for agroclimatology.</p> </li> </ul>"},{"location":"nasa_power/#glm_met.nasa_power.nasa_power.Power.convert_to_glm","title":"<code>convert_to_glm()</code>","text":"<p>Convert hourly meteorological data to GLM format and store it in the <code>glm_met_data</code> attribute.</p> <p>This function only works with hourly data, this method expects the <code>met_data.data</code> attribute of the <code>Power</code> object to have the following variables: <code>\"ALLSKY_SFC_SW_DWN\"</code>, <code>\"CLOUD_AMT\"</code>, <code>\"T2M\"</code>, <code>\"RH2M\"</code>, <code>\"WS2M\"</code>, <code>\"PRECTOTCORR\"</code>.</p> <p>If the data in <code>met_data.data</code> has different variables, you will need to write your own function to convert the data to GLM format.</p> <p><code>CLOUD_AMT</code> from NASA POWER is in percentage units. GLM requires it as a proportion (0.0 to 1.0).</p> <p><code>precipitation</code> is in mm. GLM requires it in m / day even if using hourly data, so it is converted.</p>"},{"location":"nasa_power/#glm_met.nasa_power.nasa_power.Power.get_variables","title":"<code>get_variables(request_settings)</code>","text":"<p>Get variables from the NASA POWER hourly API and store them in the <code>met_data</code> attribute.</p> <p>If you need to pass in extra settings to the API, pass these into the <code>get_variables()</code> method as a dict object. These settings will be appended to the API request as query parameters.</p> <p>Parameters:</p> <ul> <li> request_settings             (<code>Union[None, dict]</code>)         \u2013          <p>Dictionary object of extra settings to pass in as query parameters.</p> </li> </ul>"},{"location":"nasa_power/#glm_met.nasa_power.nasa_power.Power.write_glm_met","title":"<code>write_glm_met(path, zip_f, fname)</code>","text":"<p>Save meteorological data in GLM format and its metadata to file.</p> <p>Only works after a call to <code>convert_to_glm()</code> and with hourly data.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>Path to the directory where the zip file should be saved.</p> </li> <li> zip_f             (<code>bool</code>)         \u2013          <p>Whether to save output to a zip file.</p> </li> <li> fname             (<code>str</code>)         \u2013          <p>If zip_f is <code>True</code>, filename for GLM meteorological data csv.</p> </li> </ul>"},{"location":"nasa_power/#glm_met.nasa_power.nasa_power.Power.write_met","title":"<code>write_met(path)</code>","text":"<p>Save meteorological data and its metadata to a zip file.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>Path to the directory where the zip file should be saved.</p> </li> </ul>"},{"location":"silo/","title":"SILO","text":""},{"location":"silo/#metdata","title":"MetData","text":"<p>             Bases: <code>glm_met.MetData</code></p> <p>Class for meteorological data and its associated metadata.</p> <p>Used  to store meteoroligcal data downloaded from the SILO API.</p> <p>Attributes:</p> <ul> <li> metadata             (<code>dict</code>)         \u2013          <p>Metadata associated with the meteorological data.</p> </li> <li> data             (<code>pd.DataFrame</code>)         \u2013          <p>Meteorological data in a Pandas DataFrame.</p> </li> </ul>"},{"location":"silo/#silo","title":"Silo","text":"<p>             Bases: <code>glm_met.GlmMet</code></p> <p>Class for retrieving and processing historical meteorological data from the SILO API.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; import glm_met.silo.silo as silo\n&gt;&gt;&gt; s = silo.Silo(\n...            location=(116.6, -32.17),\n...            date_range=(\"20220101\", \"20220131\"),\n...            met_data=None,\n...            format=\"csv\",\n...            comment=\"rxel\",\n...            username=\"test@email.com\",\n...            api=\"data_drill\"\n...        )\n&gt;&gt;&gt; s.get_variables(request_settings=None)\n&gt;&gt;&gt; s.write_met(path=\"silo-data\")\n</code></pre> <p>After successful call to <code>get_variables()</code>, the <code>met_data</code> attribute of the <code>Silo</code> type object, <code>s</code>, is a <code>MetData</code> type object. This object has two attributes: a metadata dict and a DataFrame of met data values.</p> <pre><code>&gt;&gt;&gt; metadata = s.met_data.metadata\n&gt;&gt;&gt; met_data_df = s.met_data.data\n</code></pre> <p>Initialise object to download data from the SILO API.</p> <p>Parameters:</p> <ul> <li> location             (<code>Union[int, tuple[float, float]]</code>)         \u2013          <p>Station number for the patch point API or latitude and longitude tuple for the drill down grid API.</p> </li> <li> date_range             (<code>tuple[str, str]</code>)         \u2013          <p>Start and end dates for the data retrieval (in \"YYYYMMDD\" format).</p> </li> <li> met_data             (<code>Union[None, MetData]</code>)         \u2013          <p>Attribute to store meteorological data downloaded from SILO API.</p> </li> <li> comment             (<code> str</code>)         \u2013          <p>String codes representing meteorological variables to download. See list of variables here: <code>https://www.longpaddock.qld.gov.au/silo/about/climate-variables/</code> For example, <code>\"rxel\"</code> will download rainfall, max temperature, evaporation, and Morton's shallow lake evaporation.</p> </li> <li> username             (<code>str</code>)         \u2013          <p>Email address that must be provided.</p> </li> <li> api             (<code> str</code>)         \u2013          <p>Either \"drill_down\" for the retrieving point-like data from the gridded SILO product or \"patch_point\" for station data.</p> </li> </ul>"},{"location":"silo/#glm_met.silo.silo.Silo.convert_to_glm","title":"<code>convert_to_glm()</code>","text":"<p>Convert weather data to GLM format.</p>"},{"location":"silo/#glm_met.silo.silo.Silo.get_variables","title":"<code>get_variables(request_settings)</code>","text":"<p>Get variables from the SILO API and store them in the <code>met_data</code> attribute.</p> <p>Parameters:</p> <ul> <li> request_settings             (<code>Union[None, dict]</code>)         \u2013          <p>Dictionary object of extra settings to pass in as query parameters to the SILO API.</p> </li> </ul>"},{"location":"silo/#glm_met.silo.silo.Silo.write_glm_met","title":"<code>write_glm_met()</code>","text":"<p>Save weather data in GLM format.</p>"},{"location":"silo/#glm_met.silo.silo.Silo.write_met","title":"<code>write_met(path)</code>","text":"<p>Save meteorological data and its metadata to a zip file.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>Path to the directory where the zip file should be saved.</p> </li> </ul>"}]}