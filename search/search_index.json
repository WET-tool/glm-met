{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"GLM-met","text":"<p>A Python package for downloading meteorological data and processing it to formats required for running the GLM model.</p>"},{"location":"#glm","title":"GLM","text":"<p>GLM is a 1-dimensional lake water balance and stratification model. It is coupled with a powerful ecological modelling library to also support simulations of lake water quality and ecosystems processes.</p> <p>GLM is suitable for a wide range of natural and engineered lakes, including shallow (well-mixed) and deep (stratified) systems. The model has been successfully applied to systems from the scale of individual ponds and wetlands to the scale of Great Lakes.</p> <p>For more information about running GLM please see the model website's scientific basis description and the GLM workbook. </p> <p>The GLM model is available as an executable for Linux (Ubuntu), MacOS, and Windows. It is actively developed by the  Aquatic EcoDynamics research group at The University of Western Australia.</p>"},{"location":"#install","title":"Install","text":"<pre><code>pip install glm-met\n</code></pre>"},{"location":"#use","title":"Use","text":"<p>Import the glm-met package into a Python program and use to download meteorological data from a supported data provider.</p> <p>The following Jupyter notebook can be opened on Google Colab to demonstrate how glm-met can be used to download meteorological data from open-meteo's Historical API:</p> <p> </p> <pre><code>import os\nimport glm_met.openmeteo.historical as historical\n\n# initialise a Historical object\n# the object attributes are set to:\n# - query the open-meteo Historical API \n# - query for hourly met data from 1970 to 2022\n# - query a location in Western Australia\nhist = historical.Historical(\n            location=(116.691155, -34.225812),\n            date_range=(\"1970-01-01\", \"2022-12-31\"),\n            variables=[\"temperature_2m\", \"relativehumidity_2m\"],\n            met_data=None,\n            glm_met_data=None\n        )\n\n# make a call to the open-meteo Historical API\n# download requested data and store as DataFrame\n# in the `hist.met_data.data` attribute\nhist.get_variables()\n\n# convert downloaded data to GLM format\nhist.convert_to_glm()\n\n# write downloaded data to disk\nhist.write_glm_met(path=os.getcwd(), zip_f=False, fname=\"met.csv\")\n</code></pre>"},{"location":"#data-providers","title":"Data Providers","text":"<p>glm-met provides a base class that can be extended to support a range of meteorological data providers. </p>"},{"location":"#open-meteo","title":"open-meteo","text":"<p>Currently, the open-meteo Historical API and open-meteo Climate API are supported.</p> <p>The Historical API can be used to download daily and hourly data for any location since 1940. It provides access to a range of weather variables including air temperature, relative humidity, dewpoint temperature, apparent temperature, precipitation, sealevel and surface pressure, cloud cover, evapotranspiration, vapor pressure deficit, and wind speed. The data is based on the ERA5 (25 km Global coverage), ERA5-Land (10 km Global land coverage), and CERRA (5 km Europe) reanalysis models. </p> <p>The Climate API provides access to downscaled data from seven climate models. Daily future climate data can be accessed through till 2050. </p> <p>The open-meteo API is available for non-commericial use for up to 10,000 daily API calls under a CC-BY 4.0 license. For commericail uses, pass in an API key to calls to the open-meteo API via the <code>get_variables()</code> method of the <code>Historical</code> and <code>ClimateChange</code> classes.  </p>"},{"location":"contributing/","title":"GLM-met","text":""},{"location":"contributing/#developing","title":"Developing","text":""},{"location":"contributing/#environment","title":"Environment","text":"<p>A Docker container can be used to create a development environment. You can either build the Docker image:</p> <pre><code>docker build -t glm-met-dev .devcontainer\n</code></pre> <p>Or, you can develop glm-met using a dev container. </p>"},{"location":"contributing/#code-style","title":"Code style","text":"<p>Code linting and formatting uses ruff and black. A script to format the glm-met repository can be run: <code>./scripts/format.sh</code>. </p> <p>pre-commit is used to run ruff and black. </p>"},{"location":"contributing/#tests","title":"Tests","text":"<p>pytest is used for testing glm-met. </p> <p>If testing, please add tests under the <code>tests</code> directory. If you need test data for running tests, add them as <code>pytest.fixtures</code> in <code>conftest.py</code>. </p>"},{"location":"contributing/#extending","title":"Extending","text":"<p>The glm-met package can be extended to support downloading data from a range of meteorological data providers. </p> <p>There are two base classes that can be extended to provide with functionality for a new meteorological data provider. Theses base classes can be found in <code>glm_met/glm_met.py</code>.</p> <p>Specifically, there is a base class <code>GlmMet</code> that should be extended to define a class that comprises attributes and methods necessary to retrieve meteorological data from a specific data provider. This base class has four abstract methods that any class inheriting <code>GlmMet</code> must override and provide an implementation for:</p> <ul> <li><code>get_variables()</code> - a method to download requested weather variables from a data provider.</li> <li><code>write_met()</code> - a method to write data downloaded from a data provider to disk.</li> <li><code>convert_to_glm()</code> - a method to convert data downloaded from a data provider to GLM format.</li> <li><code>write_glm_met()</code> - a method to write meteorological data in GLM format to disk. </li> </ul> <p>Overriding, and providing an implementation for these methods, these methods ensures that the class for a new meteorological data provider offers functionality to retrieve user / client requested data and format this data ready for GLM. </p> <p>The typical development pattern for a new meteorological data provider (e.g. open-meteo's Climate API) is:</p> <p>Create a new directory and package for the new data provider inside the <code>glm_met</code> directory:</p> <pre><code>glm_met/\n    openmeteo/\n        __init__.py\n    __init__.py\n    glm_met.py\n</code></pre> <p>Create a new module within the <code>openmeteo</code> directory (e.g. named <code>climate.py</code>):</p> <pre><code>glm_met/\n    openmeteo/\n        __init__.py\n        climate.py\n    __init__.py\n    glm_met.py\n</code></pre> <p>In <code>climate.py</code> create a new class that extends the <code>GlmMet</code> base class (which is defined in <code>glm_met.py</code>):</p> <pre><code># add to climate.py\nfrom glm_met import glm_met\n\nclass MetData(glm_met.MetData):\n    def __init__(self, metadata: dict, data: pd.DataFrame):\n        \"\"\"\n        Class for meteorological data and its associated metadata.\n\n        Used within instances of `ClimateChange` class to store\n        meteoroligcal data downloaded from the open-meteo\n        climate API.\n        \"\"\"\n        self.metadata = metadata\n        self.data = data\n\n\nclass ClimateChange(glm_met.GlmMet):\n    \"\"\"\n    Class for retrieving and processing daily climate change data from\n    open-meteo's Climate API.\n    \"\"\"\n\n\n    def __init__(\n        self,\n    ):\n        \"\"\"\n        Initialize the `ClimateChange` object for retrieving and storing\n        meteorological data from open-meteo's Climate API.\n        \"\"\"\n\n        def get_variables(self) -&gt; None:\n            \"\"\"Override GlmMet.get_variables() with implementation to \n            get variables from weather data provider.\"\"\"\n            # implementation here\n\n        def write_met(self) -&gt; None:\n            \"\"\"Override GlmMet.write_met() with implementation to\n            save weather data from data provider.\"\"\"\n            # implementation here\n\n        def convert_to_glm(self) -&gt; None:\n            \"\"\"Override GlmMet.convert_to_glm() with implementation to\n            convert weather data to GLM format.\"\"\"\n            # implementation here\n\n        def write_glm_met(self) -&gt; None:\n            \"\"\"Override GlmMet.write_glm_met() with implementation to\n            save weather data in GLM format.\"\"\"\n            # implementation here\n\n</code></pre>"},{"location":"open-meteo-climate/","title":"open-meteo (climate)","text":""},{"location":"open-meteo-climate/#metdata","title":"MetData","text":"<p>             Bases: <code>glm_met.MetData</code></p> <p>Class for meteorological data and its associated metadata.</p> <p>Used within instances of the <code>Historical</code> class to store meteoroligcal data downloaded from the open-meteo historical API.</p> <p>Attributes:</p> <ul> <li> metadata             (<code>dict</code>)         \u2013          <p>Metadata associated with the meteorological data.</p> </li> <li> data             (<code>pd.DataFrame</code>)         \u2013          <p>Meteorological data in a Pandas DataFrame.</p> </li> </ul>"},{"location":"open-meteo-climate/#climate","title":"Climate","text":"<p>             Bases: <code>glm_met.GlmMet</code></p> <p>Class for retrieving and processing daily climate change data from open-meteo's Climate API.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; import glm_met.openmeteo.climate_change as climate\n&gt;&gt;&gt; clim = climate.ClimateChange(\n...            location=(116.691155, -34.225812),\n...            date_range=(\"2022-01-01\", \"2032-12-31\"),\n...            met_data=None,\n...            glm_met_data=None\n...        )\n&gt;&gt;&gt; clim.get_variables(request_settings=None)\n&gt;&gt;&gt; clim.convert_to_glm()\n&gt;&gt;&gt; clim.write_glm_met(path=os.getcwd())\n</code></pre> <p>Initialize the <code>ClimateChange</code> object for retrieving and storing meteorological data from open-meteo's Climate API.</p> <p>Parameters:</p> <ul> <li> location             (<code>tuple[float, float]</code>)         \u2013          <p>Latitude and longitude of the location for the data retrieval.</p> </li> <li> date_range             (<code>tuple[str, str]</code>)         \u2013          <p>Start and end dates for the data retrieval (in ISO 8601 format, e.g., \"YYYY-MM-DD\").</p> </li> <li> met_data             (<code>Union[None, MetData]</code>)         \u2013          <p>Attribute to store meteorological data downloaded from open-meteo.</p> </li> <li> glm_met_data             (<code>Union[None, dict]</code>)         \u2013          <p>Attribute to store meteorological data downloaded from open-meteo in GLM format. Dictionary of DataFrames with each DataFrame corresponding to a climate model in models.</p> </li> <li> models             (<code>list[str]</code>)         \u2013          <p>List of Climate models to download data from. Seven models are supported by open-meteo's Climate API: https://open-meteo.com/en/docs/climate-api. The default is to use all seven models, as specified in <code>settings.climate_models</code>.</p> </li> <li> variables             (<code>list[str]</code>)         \u2013          <p>List of meteorological variables to retrieve. The default is to use the list specified in <code>settings.climate_glm_default</code>.</p> </li> </ul>"},{"location":"open-meteo-climate/#glm_met.openmeteo.climate_change.ClimateChange.convert_to_glm","title":"<code>convert_to_glm()</code>","text":"<p>Convert meteorological data to GLM format and store it in the <code>glm_met_data</code> attribute.</p> <p>This method expects the <code>met_data.data</code> attribute of the <code>ClimateChange</code> object to have the following variables: <code>time</code>, <code>shortwave_radiation_sum</code>, <code>cloudcover_mean</code>, <code>temperature_2m_mean</code>, <code>relative_humidity_2m_mean</code>, <code>windspeed_10m_mean</code> and <code>precipitation_sum</code>.</p> <p>If the data in <code>met_data.data</code> has different variables, you will need to write your own function to convert the data to GLM format.</p> <p><code>cloudcover</code> from openmeteo is in percentage. GLM requires it as a proportion (0.0 to 1.0).</p> <p><code>precipitation</code> is in mm. GLM requires it in m so it is converted.</p>"},{"location":"open-meteo-climate/#glm_met.openmeteo.climate_change.ClimateChange.get_variables","title":"<code>get_variables(request_settings)</code>","text":"<p>Get variables from the open-meteo Climate API provider and store them in the <code>met_data</code> attribute.</p> <p>Here, windspeed is requested in units of m/s.</p> <p>If you need to pass in extra settings to the API, pass these into the <code>get_variables()</code> method as a dict object. These settings will be appended to the API request as query parameters.</p> <p>Parameters:</p> <ul> <li> request_settings             (<code>Union[None, dict]</code>)         \u2013          <p>Dictionary object of extra settings to pass in as query parameters to the open-meteo Climate API. Latitude, longitude, start data, end date, daily weather variables, and windspeed units are set from the ClimateChange object attributes. Find a list of settings here: https://open-meteo.com/en/docs/climate-api</p> </li> </ul>"},{"location":"open-meteo-climate/#glm_met.openmeteo.climate_change.ClimateChange.write_glm_met","title":"<code>write_glm_met(path)</code>","text":"<p>Save meteorological data in GLM format and its metadata to file.</p> <p>Data associated with a different climate model is written to a different csv file. The climate models name is included in the csv file's name.</p> <p>A zip file of csv files is written to <code>path</code>.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>Path to the directory where the zip file should be saved.</p> </li> </ul>"},{"location":"open-meteo-climate/#glm_met.openmeteo.climate_change.ClimateChange.write_met","title":"<code>write_met(path)</code>","text":"<p>Save meteorological data and its metadata to a zip file.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>Path to the directory where the zip file should be saved.</p> </li> </ul>"},{"location":"open-meteo-historical/","title":"open-meteo (historical)","text":""},{"location":"open-meteo-historical/#metdata","title":"MetData","text":"<p>             Bases: <code>glm_met.MetData</code></p> <p>Class for meteorological data and its associated metadata.</p> <p>Used within instances of the <code>Historical</code> class to store meteoroligcal data downloaded from the open-meteo historical API.</p> <p>Attributes:</p> <ul> <li> metadata             (<code>dict</code>)         \u2013          <p>Metadata associated with the meteorological data.</p> </li> <li> data             (<code>pd.DataFrame</code>)         \u2013          <p>Meteorological data in a Pandas DataFrame.</p> </li> </ul>"},{"location":"open-meteo-historical/#historical","title":"Historical","text":"<p>             Bases: <code>glm_met.GlmMet</code></p> <p>Class for retrieving and processing historical meteorological data from open-meteo's historical API.</p> <p>Examples:</p> <pre><code>&gt;&gt;&gt; import os\n&gt;&gt;&gt; import glm_met.openmeteo.historical as historical\n&gt;&gt;&gt; hist = historical.Historical(\n...            location=(116.691155, -34.225812),\n...            date_range=(\"1970-01-01\", \"2022-12-31\"),\n...            variables=[\"temperature_2m\", \"relativehumidity_2m\"],\n...            met_data=None,\n...            glm_met_data=None\n...        )\n&gt;&gt;&gt; hist.get_variables(request_settings=None)\n&gt;&gt;&gt; hist.convert_to_glm()\n&gt;&gt;&gt; hist.write_glm_met(path=os.getcwd(), zip_f=False, fname=\"met.csv\")\n</code></pre> <p>After successful call to <code>get_variables()</code>, the <code>met_data</code> attribute of the <code>Historical</code> type object, <code>hist, is a</code>MetData` type object. This object has two attributes: a metadata dict and a DataFrame of met data values.</p> <pre><code>&gt;&gt;&gt; metadata = hist.met_data.metadata\n&gt;&gt;&gt; met_data_df = hist.met_data.data\n</code></pre> <p>Initialises a <code>Historical</code> object retrieving and storing meteorological data from open-meteo's Historical API.</p> <p>Parameters:</p> <ul> <li> location             (<code>tuple[float, float]</code>)         \u2013          <p>Latitude and longitude of the location for the data retrieval.</p> </li> <li> date_range             (<code>tuple[str, str]</code>)         \u2013          <p>Start and end dates for the data retrieval (in ISO 8601 format, e.g., \"YYYY-MM-DD\").</p> </li> <li> met_data             (<code>Union[None, MetData]</code>)         \u2013          <p>Attribute to store meteorological data downloaded from open-meteo.</p> </li> <li> glm_met_data             (<code>Union[None, pd.DataFrame]</code>)         \u2013          <p>Attribute to store meteorological data downloaded from open-meteo in GLM format.</p> </li> <li> variables             (<code>Union[None, list[str]]</code>)         \u2013          <p>List of meteorological variables to retrieve. The default is to use the list specified in <code>settings.hourly_historical_glm_default</code> or `settings.daily_historical_glm_default.</p> </li> <li> timezone             (<code>str</code>)         \u2013          <p>Timezone for the data retrieval. Default is \"auto\".</p> </li> <li> hourly             (<code>bool</code>)         \u2013          <p>If True, retrieve hourly data; otherwise, retrieve daily data. Default is True.</p> </li> </ul>"},{"location":"open-meteo-historical/#glm_met.openmeteo.historical.Historical.convert_to_glm","title":"<code>convert_to_glm()</code>","text":"<p>Convert hourly meteorological data to GLM format and store it in the <code>glm_met_data</code> attribute.</p> <p>This function only works with hourly data, this method expects the <code>met_data.data</code> attribute of the <code>Historical</code> object to have the following variables: <code>time</code>, <code>shortwave_radiation</code>, <code>cloudcover</code>, <code>temperature_2m</code>, <code>relativehumidity_2m</code>, <code>windspeed_10m</code> and <code>precipitation</code>.</p> <p>If the data in <code>met_data.data</code> has different variables, you will need to write your own function to convert the data to GLM format.</p> <p><code>cloudcover</code> from openmeteo is in percentage units. GLM requires it as a proportion (0.0 to 1.0).</p> <p><code>precipitation</code> is in mm. GLM requires it in m so it is converted.</p>"},{"location":"open-meteo-historical/#glm_met.openmeteo.historical.Historical.get_variables","title":"<code>get_variables(request_settings)</code>","text":"<p>Get variables from the open-meteo Historical API provider and store them in the <code>met_data</code> attribute.</p> <p>Here, windspeed is requested in units of m/s.</p> <p>If you need to pass in extra settings to the API, pass these into the <code>get_variables()</code> method as a dict object. These settings will be appended to the API request as query parameters.</p> <p>Parameters:</p> <ul> <li> request_settings             (<code>Union[None, dict]</code>)         \u2013          <p>Dictionary object of extra settings to pass in as query parameters to the open-meteo Climate API. Latitude, longitude, start data, end date, timezone, daily weather variables, and windspeed units are set from the <code>Historical</code> object attributes. Find a list of settings here: https://open-meteo.com/en/docs/historical-weather-api</p> </li> </ul>"},{"location":"open-meteo-historical/#glm_met.openmeteo.historical.Historical.write_glm_met","title":"<code>write_glm_met(path, zip_f, fname)</code>","text":"<p>Save meteorological data in GLM format and its metadata to file.</p> <p>Only works after a call to <code>convert_to_glm()</code> and with hourly data.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>Path to the directory where the zip file should be saved.</p> </li> <li> zip_f             (<code>bool</code>)         \u2013          <p>Whether to save output to a zip file.</p> </li> <li> fname             (<code>str</code>)         \u2013          <p>If zip_f is <code>True</code>, filename for GLM meteorological data csv.</p> </li> </ul>"},{"location":"open-meteo-historical/#glm_met.openmeteo.historical.Historical.write_met","title":"<code>write_met(path)</code>","text":"<p>Save meteorological data and its metadata to a zip file.</p> <p>Parameters:</p> <ul> <li> path             (<code>str</code>)         \u2013          <p>Path to the directory where the zip file should be saved.</p> </li> </ul>"}]}